{"remainingRequest":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liheng/Documents/workspace/vuepress-element-extend/docs/.vuepress/components/Tree2.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/docs/.vuepress/components/Tree2.vue","mtime":1598337880030},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmNvbnN0IGNoaWxkTm9kZXMgPSAnY2hpbGROb2RlcycKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnVHJlZTInLAogIHByb3BzOiB7CiAgICBkYXRhOiB7CiAgICAgIHR5cGU6IEFycmF5LAogICAgICBkZWZhdWx0KCkgewogICAgICAgIHJldHVybiBbXQogICAgICB9CiAgICB9LAogICAgbm9kZUtleTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdpZCcKICAgIH0sCiAgICBkZWZhdWx0RXhwYW5kQWxsOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgZGVmYXVsdEV4cGFuZGVkS2V5czogewogICAgICB0eXBlOiBBcnJheSwKICAgICAgZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gW10KICAgICAgfQogICAgfSwKICAgIHNob3dDaGVja0FsbDogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIHNob3dDaGVja2JveDogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIGxldmVsOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogMQogICAgfQogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHJlZjogJ2VsVHJlZScsCiAgICAgIGtleTogJycsCiAgICAgIGFsbE5vZGVzOiBbXSwKICAgICAgbWF4TGV2ZWw6IDAsCiAgICAgIGlzRmlyc3Q6IHRydWUsCiAgICAgIGlzSW5kZXRlcm1pbmF0ZTogZmFsc2UsCiAgICAgIGNoZWNrQWxsOiBmYWxzZSwKICAgICAgdGltZW91dDogbnVsbAogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIGRhdGE6IHsKICAgICAgaGFuZGxlcjogJ2hhbmRsZURhdGEnLAogICAgICBpbW1lZGlhdGU6IHRydWUsCiAgICAgIGRlZXA6IHRydWUKICAgIH0sCiAgICBsZXZlbDogewogICAgICBoYW5kbGVyOiAnZXhwYW5kVG9MZXZlbCcsCiAgICAgIGltbWVkaWF0ZTogdHJ1ZQogICAgfSwKICAgIGRlZmF1bHRDaGVja2VkS2V5czogewogICAgICBoYW5kbGVyOiAnaGFuZGxlQ2hlY2tDaGFuZ2UnLAogICAgICBpbW1lZGlhdGU6IHRydWUKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIC8qKgogICAgICogQG1ldGhvZCDlsZXlvIDoh7PmjIflrprlsYLnuqcKICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbCDopoHlsZXlvIDoh7Plh6DnuqfvvJ8wLCAxLCAyLCAzLi4uCiAgICAgKiovCiAgICBhc3luYyBleHBhbmRUb0xldmVsKGxldmVsKSB7CiAgICAgIGlmICh0aGlzLmlzRmlyc3QgJiYgKHRoaXMuZGVmYXVsdEV4cGFuZEFsbCB8fCB0aGlzLmRlZmF1bHRFeHBhbmRlZEtleXMubGVuZ3RoKSkgewogICAgICAgIHRoaXMuaXNGaXJzdCA9IGZhbHNlCiAgICAgICAgcmV0dXJuCiAgICAgIH0KICAgICAgdGhpcy5pc0ZpcnN0ID0gZmFsc2UKICAgICAgaWYgKCF0aGlzLm1heExldmVsKSB7CiAgICAgICAgYXdhaXQgdGhpcy5oYW5kbGVEYXRhKCkKICAgICAgfQogICAgICBjb25zdCBhbGxOb2RlcyA9IHRoaXMuYWxsTm9kZXMuc29ydCgoYSwgYikgPT4gYi5sZXZlbCAtIGEubGV2ZWwpCiAgICAgIGlmIChsZXZlbCA9PT0gMCkgewogICAgICAgIC8vIOWxleW8gOWFqOmDqAogICAgICAgIGFsbE5vZGVzLmZvckVhY2gobm9kZSA9PiB7CiAgICAgICAgICBub2RlLmlzTGVhZiAmJiBub2RlLmV4cGFuZChudWxsLCB0cnVlKQogICAgICAgIH0pCiAgICAgIH0gZWxzZSB7CiAgICAgICAgYWxsTm9kZXMuZm9yRWFjaChub2RlID0+IHsKICAgICAgICAgIGlmIChub2RlLmxldmVsID49IGxldmVsKSB7CiAgICAgICAgICAgIG5vZGUuZXhwYW5kZWQgPSBmYWxzZQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbm9kZS5leHBhbmRlZCA9IHRydWUKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICB9CiAgICB9LAogICAgaGFuZGxlRGF0YSgpIHsKICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgIHRoaXMuYWxsTm9kZXMgPSB0aGlzLmdldEFsbE5vZGVzKHRoaXMuJHJlZnNbdGhpcy5yZWZdLnJvb3RbY2hpbGROb2Rlc10pCiAgICAgICAgdGhpcy5hbGxOb2Rlcy5sZW5ndGggJiYKICAgICAgICAgICh0aGlzLm1heExldmVsID0gTWF0aC5tYXguYXBwbHkoCiAgICAgICAgICAgIG51bGwsCiAgICAgICAgICAgIHRoaXMuYWxsTm9kZXMubWFwKCh7IGxldmVsIH0pID0+IGxldmVsKQogICAgICAgICAgKSkKICAgICAgICB0aGlzLiRlbWl0KCdtYXgtbGV2ZWwnLCB0aGlzLm1heExldmVsKQogICAgICAgIHRoaXMuaGFuZGxlQ2hlY2tDaGFuZ2UoKQogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKQogICAgICB9KQogICAgfSwKICAgIGdldEFsbE5vZGVzKCkgewogICAgICBsZXQgYWxsTm9kZXMgPSBbXQogICAgICBjb25zdCB0cmF2ZXJzZSA9IGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICBjb25zdCBjaGlsZE5vZGVzID0gbm9kZS5yb290ID8gbm9kZS5yb290LmNoaWxkTm9kZXMgOiBub2RlLmNoaWxkTm9kZXMKICAgICAgICBjaGlsZE5vZGVzLmZvckVhY2goY2hpbGQgPT4gewogICAgICAgICAgYWxsTm9kZXMucHVzaChjaGlsZCkKICAgICAgICAgIHRyYXZlcnNlKGNoaWxkKQogICAgICAgIH0pCiAgICAgIH0KICAgICAgdHJhdmVyc2UodGhpcy4kcmVmc1t0aGlzLnJlZl0pCiAgICAgIHJldHVybiBhbGxOb2RlcwogICAgfSwKICAgIC8vIOWkhOeQhuWFqOmAiQogICAgaGFuZGxlQ2hlY2tBbGxDaGFuZ2UoKSB7CiAgICAgIHRoaXMuaXNJbmRldGVybWluYXRlID0gZmFsc2UKICAgICAgbGV0IGNoZWNrZWRLZXlzID0gW10KICAgICAgaWYgKHRoaXMuY2hlY2tBbGwpIHsKICAgICAgICBjb25zdCBjaGVja2VkTm9kZXMgPSB0aGlzLmFsbE5vZGVzLmZpbHRlcigoeyB2aXNpYmxlIH0pID0+IHZpc2libGUpCiAgICAgICAgY2hlY2tlZEtleXMgPSBjaGVja2VkTm9kZXMubWFwKCh7IGtleSB9KSA9PiBrZXkpCiAgICAgICAgdGhpcy4kZW1pdCgKICAgICAgICAgICdjaGVjaycsCiAgICAgICAgICB7IFt0aGlzLiRyZWZzW3RoaXMucmVmXS5wcm9wcy5sYWJlbCB8fCAnbGFiZWwnXTogJ+WFqOmAiScgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgY2hlY2tlZE5vZGVzLAogICAgICAgICAgICBjaGVja2VkS2V5cywKICAgICAgICAgICAgaGFsZkNoZWNrZWROb2RlczogW10sCiAgICAgICAgICAgIGhhbGZDaGVja2VkS2V5czogW10KICAgICAgICAgIH0KICAgICAgICApCiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy4kZW1pdCgKICAgICAgICAgICdjaGVjaycsCiAgICAgICAgICB7IFt0aGlzLiRyZWZzW3RoaXMucmVmXS5wcm9wcy5sYWJlbCB8fCAnbGFiZWwnXTogJ+WFqOmAiScgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgY2hlY2tlZE5vZGVzOiBbXSwKICAgICAgICAgICAgY2hlY2tlZEtleXM6IFtdLAogICAgICAgICAgICBoYWxmQ2hlY2tlZE5vZGVzOiBbXSwKICAgICAgICAgICAgaGFsZkNoZWNrZWRLZXlzOiBbXQogICAgICAgICAgfQogICAgICAgICkKICAgICAgfQogICAgICB0aGlzLiRyZWZzW3RoaXMucmVmXS5zZXRDaGVja2VkS2V5cyhjaGVja2VkS2V5cykKICAgIH0sCiAgICBoYW5kbGVDaGVja0NoYW5nZSgpIHsKICAgICAgaWYgKCF0aGlzLnNob3dDaGVja0FsbCB8fCAhdGhpcy5zaG93Q2hlY2tib3ggfHwgIXRoaXMuZGF0YS5sZW5ndGgpIHsKICAgICAgICByZXR1cm4KICAgICAgfQogICAgICAvLyDpmLLmipYKICAgICAgdGhpcy5kZWJvdW5jZSh0aGlzLmhhbmRsZUNoZWNrQWxsU3RhdHVzLCAxMDApCiAgICB9LAogICAgLy8g6Ziy5oqWCiAgICBkZWJvdW5jZShmdW5jLCB3YWl0KSB7CiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpCiAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuYywgd2FpdCkKICAgIH0sCiAgICBoYW5kbGVDaGVja0FsbFN0YXR1cygpIHsKICAgICAgY29uc3QgYWxsTm9kZXMgPSB0aGlzLmFsbE5vZGVzLmZpbHRlcigoeyBsZXZlbCwgdmlzaWJsZSB9KSA9PiBsZXZlbCA9PT0gMSAmJiB2aXNpYmxlKQogICAgICAvLyDlhbPkuo4gZmlsdGVyIOeahOivtOaYjjoKICAgICAgLy8g5YWo6YCJ55qE54q25oCB5YW25a6e5Y+q5ZKM5qC56IqC54K555qE54q25oCB5pyJ5YWzLCDogIzkuJTkuZ/lpITnkIbkuoYgc2V0IOaWueazleS4rSBsZWFmT25seSDkuLogdHJ1ZSDnmoTmg4XlhrUKICAgICAgLy8gdmlzaWJsZSDnu5PlkIjov4fmu6Tkvb/nlKgKICAgICAgdGhpcy5jaGVja0FsbCA9IGFsbE5vZGVzLmV2ZXJ5KCh7IGNoZWNrZWQgfSkgPT4gY2hlY2tlZCkKICAgICAgdGhpcy5pc0luZGV0ZXJtaW5hdGUgPQogICAgICAgIGFsbE5vZGVzLnNvbWUoKHsgaW5kZXRlcm1pbmF0ZSB9KSA9PiBpbmRldGVybWluYXRlKSB8fAogICAgICAgIChhbGxOb2Rlcy5zb21lKCh7IGNoZWNrZWQgfSkgPT4gY2hlY2tlZCkgJiYgIXRoaXMuY2hlY2tBbGwpCiAgICB9CiAgfSwKICBtb3VudGVkKCkgewogICAgLy8g57uR5a6aIGVsLXRyZWUg5pa55rOVCiAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy4kcmVmc1t0aGlzLnJlZl0pIHsKICAgICAgaWYgKCEoa2V5IGluIHRoaXMpICYmIHR5cGVvZiB0aGlzLiRyZWZzW3RoaXMucmVmXVtrZXldID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgdGhpc1trZXldID0gdGhpcy4kcmVmc1t0aGlzLnJlZl1ba2V5XS5iaW5kKHRoaXMuJHJlZnNbdGhpcy5yZWZdKQogICAgICB9CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["Tree2.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"Tree2.vue","sourceRoot":"docs/.vuepress/components","sourcesContent":["<!--\n * @Author: HenryTSZ\n * @Date: 2020-01-31 11:15:30\n * @Description: https://vue-element-extend.now.sh/#/element-ui/TreeDemo\n * @LastEditors: HenryTSZ\n * @LastEditTime: 2020-06-14 15:19:36\n -->\n<template>\n  <div class=\"b-tree\">\n    <el-checkbox\n      v-if=\"showCheckAll && showCheckbox && data.length\"\n      class=\"b-tree-check-all\"\n      :indeterminate=\"isIndeterminate\"\n      v-model=\"checkAll\"\n      @change=\"handleCheckAllChange\"\n      >全选</el-checkbox\n    >\n    <el-tree\n      :ref=\"ref\"\n      :key=\"key\"\n      :data=\"data\"\n      v-bind=\"$attrs\"\n      :node-key=\"nodeKey\"\n      :default-expand-all=\"defaultExpandAll\"\n      :default-expanded-keys=\"defaultExpandedKeys\"\n      :show-checkbox=\"showCheckbox\"\n      v-on=\"$listeners\"\n      @check-change=\"handleCheckChange\"\n    >\n      <slot slot-scope=\"{ node, data }\" v-bind=\"{ node, data }\"> {{ node.label }} </slot>\n    </el-tree>\n  </div>\n</template>\n\n<script>\nconst childNodes = 'childNodes'\n\nexport default {\n  name: 'Tree2',\n  props: {\n    data: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    nodeKey: {\n      type: String,\n      default: 'id'\n    },\n    defaultExpandAll: {\n      type: Boolean,\n      default: false\n    },\n    defaultExpandedKeys: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    showCheckAll: {\n      type: Boolean,\n      default: false\n    },\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    },\n    level: {\n      type: Number,\n      default: 1\n    }\n  },\n  data() {\n    return {\n      ref: 'elTree',\n      key: '',\n      allNodes: [],\n      maxLevel: 0,\n      isFirst: true,\n      isIndeterminate: false,\n      checkAll: false,\n      timeout: null\n    }\n  },\n  watch: {\n    data: {\n      handler: 'handleData',\n      immediate: true,\n      deep: true\n    },\n    level: {\n      handler: 'expandToLevel',\n      immediate: true\n    },\n    defaultCheckedKeys: {\n      handler: 'handleCheckChange',\n      immediate: true\n    }\n  },\n  methods: {\n    /**\n     * @method 展开至指定层级\n     * @param {Number} level 要展开至几级？0, 1, 2, 3...\n     **/\n    async expandToLevel(level) {\n      if (this.isFirst && (this.defaultExpandAll || this.defaultExpandedKeys.length)) {\n        this.isFirst = false\n        return\n      }\n      this.isFirst = false\n      if (!this.maxLevel) {\n        await this.handleData()\n      }\n      const allNodes = this.allNodes.sort((a, b) => b.level - a.level)\n      if (level === 0) {\n        // 展开全部\n        allNodes.forEach(node => {\n          node.isLeaf && node.expand(null, true)\n        })\n      } else {\n        allNodes.forEach(node => {\n          if (node.level >= level) {\n            node.expanded = false\n          } else {\n            node.expanded = true\n          }\n        })\n      }\n    },\n    handleData() {\n      this.$nextTick(() => {\n        this.allNodes = this.getAllNodes(this.$refs[this.ref].root[childNodes])\n        this.allNodes.length &&\n          (this.maxLevel = Math.max.apply(\n            null,\n            this.allNodes.map(({ level }) => level)\n          ))\n        this.$emit('max-level', this.maxLevel)\n        this.handleCheckChange()\n        return Promise.resolve()\n      })\n    },\n    getAllNodes() {\n      let allNodes = []\n      const traverse = function(node) {\n        const childNodes = node.root ? node.root.childNodes : node.childNodes\n        childNodes.forEach(child => {\n          allNodes.push(child)\n          traverse(child)\n        })\n      }\n      traverse(this.$refs[this.ref])\n      return allNodes\n    },\n    // 处理全选\n    handleCheckAllChange() {\n      this.isIndeterminate = false\n      let checkedKeys = []\n      if (this.checkAll) {\n        const checkedNodes = this.allNodes.filter(({ visible }) => visible)\n        checkedKeys = checkedNodes.map(({ key }) => key)\n        this.$emit(\n          'check',\n          { [this.$refs[this.ref].props.label || 'label']: '全选' },\n          {\n            checkedNodes,\n            checkedKeys,\n            halfCheckedNodes: [],\n            halfCheckedKeys: []\n          }\n        )\n      } else {\n        this.$emit(\n          'check',\n          { [this.$refs[this.ref].props.label || 'label']: '全选' },\n          {\n            checkedNodes: [],\n            checkedKeys: [],\n            halfCheckedNodes: [],\n            halfCheckedKeys: []\n          }\n        )\n      }\n      this.$refs[this.ref].setCheckedKeys(checkedKeys)\n    },\n    handleCheckChange() {\n      if (!this.showCheckAll || !this.showCheckbox || !this.data.length) {\n        return\n      }\n      // 防抖\n      this.debounce(this.handleCheckAllStatus, 100)\n    },\n    // 防抖\n    debounce(func, wait) {\n      clearTimeout(this.timeout)\n      this.timeout = setTimeout(func, wait)\n    },\n    handleCheckAllStatus() {\n      const allNodes = this.allNodes.filter(({ level, visible }) => level === 1 && visible)\n      // 关于 filter 的说明:\n      // 全选的状态其实只和根节点的状态有关, 而且也处理了 set 方法中 leafOnly 为 true 的情况\n      // visible 结合过滤使用\n      this.checkAll = allNodes.every(({ checked }) => checked)\n      this.isIndeterminate =\n        allNodes.some(({ indeterminate }) => indeterminate) ||\n        (allNodes.some(({ checked }) => checked) && !this.checkAll)\n    }\n  },\n  mounted() {\n    // 绑定 el-tree 方法\n    for (let key in this.$refs[this.ref]) {\n      if (!(key in this) && typeof this.$refs[this.ref][key] === 'function') {\n        this[key] = this.$refs[this.ref][key].bind(this.$refs[this.ref])\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"less\">\n.b-tree {\n  color: #606266;\n  .b-tree-check-all {\n    padding-left: 8px;\n    font-weight: normal;\n    .el-checkbox__label {\n      color: #606266;\n    }\n  }\n}\n</style>\n"]}]}