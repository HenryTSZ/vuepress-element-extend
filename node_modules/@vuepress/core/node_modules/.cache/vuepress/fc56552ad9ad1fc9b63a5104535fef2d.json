{"remainingRequest":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liheng/Documents/workspace/vuepress-element-extend/docs/.vuepress/components/SelectTree.vue?vue&type=style&index=0&id=8670476e&lang=less&scoped=true&","dependencies":[{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/docs/.vuepress/components/SelectTree.vue","mtime":1598335799757},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5zZWxlY3QtdHJlZSB7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIC5lbC1zZWxlY3QgewogICAgd2lkdGg6IDEwMCU7CiAgfQp9Ci5lbC1zZWxlY3QtZHJvcGRvd25fX2l0ZW0gewogIGRpc3BsYXk6IG5vbmU7Cn0K"},{"version":3,"sources":["SelectTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SelectTree.vue","sourceRoot":"docs/.vuepress/components","sourcesContent":["<template>\n  <div class=\"select-tree\">\n    <el-select\n      ref=\"select\"\n      v-model=\"selectData\"\n      v-bind=\"{ ...$attrs, ...selectProps }\"\n      @visible-change=\"handleVisibleChange\"\n      @remove-tag=\"handleRemoveTag\"\n      @clear=\"handleClear\"\n    >\n      <el-option\n        v-for=\"item in selectOptions\"\n        :key=\"item.value\"\n        :value=\"item.value\"\n        :label=\"item.label\"\n      ></el-option>\n      <tree\n        :key=\"treeKey\"\n        ref=\"tree\"\n        v-bind=\"treeBind\"\n        @current-change=\"handleCurrentChange\"\n        @check-change=\"handleCheckChange\"\n      ></tree>\n    </el-select>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'SelectTree',\n  props: {\n    value: {\n      type: [String, Number, Array],\n      required: true\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    selectProps: {\n      type: Object,\n      default() {\n        return {}\n      }\n    },\n    treeProps: {\n      type: Object,\n      default() {\n        return {}\n      },\n      required: true\n    },\n    // 单选时是否只能选择叶子节点\n    currentIsLeaf: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @description: 自定义单选时只能选择子节点方法; 优先级高于 currentIsLeaf\n     * @param {data: Object}: 当前节点数据\n     * @param {node: Object}: 当前节点 Node 对象\n     * @return: Boolean\n     */\n    isLeafFun: {\n      type: Function\n    }\n  },\n  data() {\n    return {\n      treeKey: Math.random(),\n      selectData: '',\n      selectOptions: []\n    }\n  },\n  computed: {\n    treeBind() {\n      return {\n        showCheckbox: this.isMultiple,\n        highlightCurrent: !this.isMultiple,\n        expandOnClickNode: this.expandOnClickNode,\n        nodeKey: 'id',\n        ...this.treeProps,\n        defaultCheckedKeys: this.isMultiple ? this.value : [],\n        currentNodeKey: this.isMultiple ? '' : this.value\n      }\n    },\n    isMultiple() {\n      return this.selectProps.multiple || this.multiple\n    },\n    expandOnClickNode() {\n      return this.isMultiple ? true : this.currentIsLeaf\n    }\n  },\n  watch: {\n    value() {\n      // 为了检测 v-model 的变化\n      if (this.value + '' !== this.selectData + '') {\n        this.treeKey = Math.random()\n        this.init()\n      }\n    }\n  },\n  methods: {\n    init() {\n      this.$nextTick(() => {\n        if (this.isMultiple) {\n          this.handleCheckChange()\n        } else {\n          this.handleCurrentChange()\n        }\n      })\n    },\n    // select 下拉框出现/隐藏\n    handleVisibleChange(val) {\n      // 下拉框隐藏并且值改变后\n      if (!val && this.value + '' !== this.selectData + '') {\n        this.$emit('input', this.selectData)\n        this.$emit('change', this.selectData)\n      }\n      this.$emit('visible-change', val)\n    },\n    // select 清空\n    handleClear() {\n      if (this.$refs.tree.showCheckbox) {\n        this.selectData = []\n        this.$refs.tree.setCheckedKeys([])\n      } else {\n        this.selectData = ''\n        this.$refs.tree.setCurrentKey(null)\n      }\n      this.$emit('input', this.selectData)\n      this.$emit('change', this.selectData)\n      this.$emit('clear')\n    },\n    // select 移除 tag\n    handleRemoveTag(val) {\n      this.$refs.tree.setChecked(val, false)\n      let node = this.$refs.tree.getNode(val)\n      if (!this.$refs.tree.checkStrictly && node.childNodes.length > 0) {\n        this.tree2List(node).map(item => {\n          if (item.childNodes.length <= 0) {\n            this.$refs.tree.setChecked(item, false)\n          }\n        })\n        this.handleCheckChange()\n      }\n      this.$emit('input', this.selectData)\n      this.$emit('change', this.selectData)\n      this.$emit('remove-tag', val)\n    },\n    // 单选, 节点被点击时的回调, 返回被点击的节点数据\n    handleCurrentChange() {\n      // 如果多选, 不处理\n      if (this.isMultiple) return\n      // 给 selectOptions 一个默认值, 防止出现无数据, 从而无法显示 tree\n      this.selectOptions = [{}]\n      const currentNode = this.$refs.tree.getCurrentNode()\n      // 当前传入的值在 tree 中无法找到, 需要清空 select 值\n      if (!currentNode) {\n        this.selectData = ''\n        return\n      }\n      const node = this.$refs.tree.getNode(currentNode)\n      // 判断叶子节点\n      if (this.isLeafFun ? this.isLeafFun(currentNode, node) : !node.isLeaf && this.currentIsLeaf) {\n        // 如果不是叶子节点, 设置当前选中节点仍为上一个叶子节点\n        this.$refs.tree.setCurrentKey(this.selectData || null)\n        return\n      }\n      this.selectData = ''\n      const value = node.key\n      const label = node.label\n      this.selectOptions = [\n        {\n          value,\n          label\n        }\n      ]\n      this.selectData = value\n      this.$refs.select.blur()\n    },\n    // 多选, 节点勾选状态发生变化时的回调\n    handleCheckChange() {\n      this.selectOptions = [{}]\n      this.selectData = []\n      const checkedKeys = this.$refs.tree.getCheckedKeys(\n        this.treeProps.leafOnly,\n        this.treeProps.includeHalfChecked\n      )\n      checkedKeys.forEach(key => {\n        const checkedNode = this.$refs.tree.getNode(key)\n        const value = checkedNode.key\n        this.selectOptions.push({\n          value,\n          label: checkedNode.label\n        })\n        this.selectData.push(value)\n      })\n    },\n    tree2List(tree) {\n      let queen = []\n      let out = []\n      queen = queen.concat(tree)\n      while (queen.length) {\n        let first = queen.shift()\n        if (first.childNodes) {\n          queen = queen.concat(first.childNodes)\n        }\n        out.push(first)\n      }\n      return out\n    }\n  },\n  mounted() {\n    this.init()\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.select-tree {\n  display: inline-block;\n  .el-select {\n    width: 100%;\n  }\n}\n.el-select-dropdown__item {\n  display: none;\n}\n</style>\n"]}]}