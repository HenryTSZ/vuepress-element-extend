{"remainingRequest":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liheng/Documents/workspace/vuepress-element-extend/docs/.vuepress/components/Tree3.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/docs/.vuepress/components/Tree3.vue","mtime":1598337886633},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmItdHJlZSB7CiAgY29sb3I6ICM2MDYyNjY7CiAgLmItdHJlZS1jaGVjay1hbGwgewogICAgcGFkZGluZy1sZWZ0OiA4cHg7CiAgICBmb250LXdlaWdodDogbm9ybWFsOwogICAgLmVsLWNoZWNrYm94X19sYWJlbCB7CiAgICAgIGNvbG9yOiAjNjA2MjY2OwogICAgfQogIH0KfQo="},{"version":3,"sources":["Tree3.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Tree3.vue","sourceRoot":"docs/.vuepress/components","sourcesContent":["<template>\n  <div class=\"b-tree\">\n    <el-tree\n      :ref=\"ref\"\n      v-bind=\"$attrs\"\n      :data=\"treeData\"\n      :node-key=\"nodeKey\"\n      :show-checkbox=\"showCheckbox\"\n      v-on=\"$listeners\"\n    >\n      <slot slot-scope=\"{ node, data }\" v-bind=\"{ node, data }\"> {{ node.label }} </slot>\n    </el-tree>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Tree3',\n  props: {\n    data: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    nodeKey: {\n      type: String,\n      default: 'id'\n    },\n    showCheckAll: {\n      type: Boolean,\n      default: false\n    },\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    },\n    level: {\n      type: Number,\n      default: 1\n    }\n  },\n  data() {\n    return {\n      treeData: [],\n      ref: 'elTree',\n      checkAllId: '__rootId__'\n    }\n  },\n  watch: {\n    data: {\n      handler: 'handleData',\n      immediate: true\n    },\n    level: {\n      handler: 'expandToLevel',\n      immediate: true\n    }\n  },\n  computed: {\n    isCheckAll() {\n      return this.showCheckAll && this.showCheckbox\n    }\n  },\n  methods: {\n    /**\n     * @method 展开至指定层级\n     * @param {Number} level 要展开至几级？0, 1, 2, 3...\n     **/\n    expandToLevel(level) {\n      this.$nextTick(() => {\n        const elTreeStore = this.$refs[this.ref].store\n        const allNodes = elTreeStore._getAllNodes().sort((a, b) => b.level - a.level)\n        console.log('expandToLevel -> elTreeStore._getAllNodes()', elTreeStore._getAllNodes())\n        if (level === 0) {\n          // 展开全部\n          allNodes.forEach(node => {\n            node.isLeaf && node.expand(null, true)\n          })\n        } else {\n          allNodes.forEach(node => {\n            if (node.level >= level) {\n              node.expanded = false\n            } else {\n              node.expanded = true\n            }\n          })\n        }\n      })\n    },\n    handleData() {\n      if (this.isCheckAll && this.data.length) {\n        this.treeData = [\n          {\n            [this.$refs[this.ref].props.label]: '全选',\n            [this.nodeKey]: this.checkAllId,\n            [this.$refs[this.ref].props.children]: this.data\n          }\n        ]\n      } else {\n        this.treeData = this.data\n      }\n    },\n    getCheckedNodes(leafOnly, includeHalfChecked) {\n      if (this.isCheckAll) {\n        return this.$refs[this.ref]\n          .getCheckedNodes(leafOnly, includeHalfChecked)\n          .filter(node => node[this.nodeKey] !== this.checkAllId)\n      }\n      return this.$refs[this.ref].getCheckedNodes(leafOnly, includeHalfChecked)\n    },\n    getHalfCheckedNodes() {\n      if (this.isCheckAll) {\n        return this.$refs[this.ref]\n          .getHalfCheckedNodes()\n          .filter(node => node[this.nodeKey] !== this.checkAllId)\n      }\n      return this.$refs[this.ref].getHalfCheckedNodes()\n    },\n    getCheckedKeys(leafOnly) {\n      if (this.isCheckAll) {\n        return this.$refs[this.ref].getCheckedKeys(leafOnly).filter(key => key !== this.checkAllId)\n      }\n      return this.$refs[this.ref].getCheckedKeys(leafOnly)\n    },\n    getHalfCheckedKeys() {\n      if (this.isCheckAll) {\n        return this.$refs[this.ref].getHalfCheckedKeys().filter(key => key !== this.checkAllId)\n      }\n      return this.$refs[this.ref].getHalfCheckedKeys()\n    }\n  },\n  mounted() {\n    // 绑定 el-tree 方法\n    for (let key in this.$refs[this.ref]) {\n      if (!(key in this) && typeof this.$refs[this.ref][key] === 'function') {\n        this[key] = this.$refs[this.ref][key].bind(this.$refs[this.ref])\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"less\">\n.b-tree {\n  color: #606266;\n  .b-tree-check-all {\n    padding-left: 8px;\n    font-weight: normal;\n    .el-checkbox__label {\n      color: #606266;\n    }\n  }\n}\n</style>\n"]}]}