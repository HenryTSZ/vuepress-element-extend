{"remainingRequest":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liheng/Documents/workspace/vuepress-element-extend/docs/.vuepress/components/TreeTable.vue?vue&type=style&index=0&id=6927fade&lang=less&scoped=true&","dependencies":[{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/docs/.vuepress/components/TreeTable.vue","mtime":1598335889417},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnRyZWUtdGFibGUgewogIC9kZWVwLyAuZWwtdGFibGVfX2JvZHktd3JhcHBlciB7CiAgICAuY2VsbCB7CiAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["TreeTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TreeTable.vue","sourceRoot":"docs/.vuepress/components","sourcesContent":["<template>\n  <el-table\n    class=\"tree-table\"\n    :ref=\"ref\"\n    :data=\"data\"\n    v-bind=\"$attrs\"\n    v-on=\"{ ...$listeners, select, 'select-all': selectAll, 'selection-change': selectionChange }\"\n  >\n    <slot name=\"prev\"></slot>\n    <template v-for=\"(column, index) in cols\">\n      <el-table-column\n        v-if=\"column.editable || column.editableFun\"\n        :key=\"`${column.prop}-edit`\"\n        v-bind=\"column\"\n      >\n        <template slot-scope=\"{ row, $index }\">\n          <editable-elements\n            v-if=\"!column.editableFun || column.editableFun(row, column, row[column.prop], $index)\"\n            :model=\"row\"\n            :item=\"{ ...column, focus: index === focusCol && $index === focusRow }\"\n            @change=\"change(row, $event, column)\"\n          ></editable-elements>\n          <span v-else class=\"uneditable\">{{\n            column.formatter\n              ? column.formatter(row, column, row[column.prop], $index)\n              : row[column.prop]\n          }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column v-else :key=\"column.prop\" v-bind=\"column\"> </el-table-column>\n    </template>\n    <slot></slot>\n  </el-table>\n</template>\n\n<script>\nexport default {\n  name: 'TreeTable',\n  props: {\n    keyProps: {\n      type: Object,\n      default() {\n        return null\n      }\n    },\n    data: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    columns: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    focusRow: {\n      type: Number,\n      default: 0\n    },\n    focusCol: {\n      type: Number,\n      default: 0\n    },\n    level: {\n      type: Number,\n      default: 1\n    },\n    refreshLevel: {\n      type: [String, Number],\n      default: ''\n    },\n    checkStrictly: {\n      type: Boolean,\n      default: false\n    },\n    checkAll: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data() {\n    return {\n      ref: 'elTable',\n      maxLevel: 0,\n      treeData: {},\n      children: '',\n      timeout: null\n    }\n  },\n  computed: {\n    cols() {\n      return this.keyProps\n        ? this.columns.map(column => ({\n            ...column,\n            prop: column[this.keyProps.prop || 'prop'],\n            label: column[this.keyProps.label || 'label']\n          }))\n        : this.columns\n    }\n  },\n  watch: {\n    level: {\n      handler: 'expandToLevel',\n      immediate: true\n    },\n    refreshLevel: {\n      handler: 'expandToLevel'\n    },\n    data: {\n      handler: 'handleData',\n      deep: true,\n      immediate: true\n    }\n  },\n  methods: {\n    async expandToLevel() {\n      if (!this.$refs[this.ref]) return\n      if (!this.maxLevel) {\n        await this.handleData()\n      }\n      let level = 0\n      if (this.level <= 0) {\n        level = this.maxLevel - 2\n      } else {\n        level = this.level - 2\n      }\n      for (const key in this.treeData) {\n        if (this.treeData.hasOwnProperty(key)) {\n          this.treeData[key].expanded = this.treeData[key].level <= level\n        }\n      }\n      this.$nextTick(() => {\n        this.$refs[this.ref].doLayout()\n      })\n    },\n    handleData() {\n      this.$nextTick(() => {\n        this.treeData = this.$refs[this.ref].store.states.treeData\n        const levels = Object.values(this.treeData).map(({ level }) => level)\n        if (levels.length) {\n          this.maxLevel = Math.max.apply(null, levels) + 2\n        } else {\n          this.maxLevel = 0\n        }\n        this.$emit('max-level', this.maxLevel)\n\n        this.children = this.$refs[this.ref].treeProps.children\n        return Promise.resolve()\n      })\n    },\n\n    select(selection, row) {\n      if (!this.checkStrictly) {\n        const selected = selection.includes(row)\n        this.$emit('select', selection, row)\n        this.selectChildren(row, selected, selection)\n        return\n      }\n      this.$emit('select', selection, row)\n    },\n    selectAll(selection) {\n      if (this.checkAll) {\n        // tableData 第一层只要有在 selection 里面就是全选\n        const isSelect = this.data.some(item => selection.includes(item))\n        if (isSelect) {\n          selection.forEach(item => {\n            this.selectChildren(item, isSelect)\n          })\n        } else {\n          this.data.forEach(item => {\n            this.selectChildren(item, isSelect)\n          })\n        }\n      }\n      this.$nextTick(() => {\n        this.$emit('select-all', selection)\n      })\n    },\n    /**\n     * @description: 设置子元素是否选中\n     * @param {row: Object} 父元素\n     * @param {selected: Boolean} 是否选中\n     * @param {selection: Array} 是否 emit selection\n     */\n    selectChildren(row, selected, selection) {\n      if (row[this.children] && Array.isArray(row[this.children])) {\n        row[this.children].forEach(item => {\n          this.toggleSelection(item, selected)\n          if (selection) {\n            if (selected && !selection.includes(item)) {\n              selection = selection.concat(item)\n              this.$emit('select', selection, item)\n            }\n            if (!selected && selection.includes(item)) {\n              selection = selection.filter(ele => ele !== item)\n              this.$emit('select', selection, item)\n            }\n            const result = this.selectChildren(item, selected, selection)\n            if (result) selection = result\n          } else {\n            this.selectChildren(item, selected, selection)\n          }\n        })\n        if (selection) return selection\n      }\n    },\n    selectionChange(selection) {\n      this.debounce(this.emitSelectionChange, 100, selection)\n    },\n    emitSelectionChange(selection) {\n      this.$emit('selection-change', selection)\n    },\n    toggleSelection(row, select) {\n      row &&\n        this.$nextTick(() => {\n          this.$refs[this.ref] && this.$refs[this.ref].toggleRowSelection(row, select)\n        })\n    },\n    cancelAll() {\n      this.$refs[this.ref] && this.$refs[this.ref].clearSelection()\n    },\n    // 防抖\n    debounce(fun, wait, params) {\n      clearTimeout(this.timeout)\n      this.timeout = setTimeout(fun, wait, params)\n    },\n    change(row, e, column) {\n      this.$emit('row-change', row, e, column.prop)\n    }\n  },\n  mounted() {\n    for (let key in this.$refs[this.ref]) {\n      if (!(key in this) && typeof this.$refs[this.ref][key] === 'function') {\n        this[key] = this.$refs[this.ref][key].bind(this.$refs[this.ref])\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.tree-table {\n  /deep/ .el-table__body-wrapper {\n    .cell {\n      display: flex;\n      align-items: center;\n    }\n  }\n}\n</style>\n"]}]}