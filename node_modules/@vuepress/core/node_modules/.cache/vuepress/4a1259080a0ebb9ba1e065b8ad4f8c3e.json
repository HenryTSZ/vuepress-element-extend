{"remainingRequest":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liheng/Documents/workspace/vuepress-element-extend/docs/.vuepress/components/Tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/docs/.vuepress/components/Tree.vue","mtime":1598335909309},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmNvbnN0IGNoaWxkTm9kZXMgPSAnY2hpbGROb2RlcycKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnVHJlZScsCiAgcHJvcHM6IHsKICAgIGRhdGE6IHsKICAgICAgdHlwZTogQXJyYXksCiAgICAgIGRlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIFtdCiAgICAgIH0KICAgIH0sCiAgICBub2RlS2V5OiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJ2lkJwogICAgfSwKICAgIGRlZmF1bHRFeHBhbmRBbGw6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCiAgICBkZWZhdWx0RXhwYW5kZWRLZXlzOiB7CiAgICAgIHR5cGU6IEFycmF5LAogICAgICBkZWZhdWx0KCkgewogICAgICAgIHJldHVybiBbXQogICAgICB9CiAgICB9LAogICAgc2hvd0NoZWNrQWxsOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgc2hvd0NoZWNrYm94OiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgbGV2ZWw6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAxCiAgICB9CiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgcmVmOiAnZWxUcmVlJywKICAgICAga2V5OiAnJywKICAgICAgYWxsTm9kZXM6IFtdLAogICAgICBtYXhMZXZlbDogMCwKICAgICAgaXNGaXJzdDogdHJ1ZSwKICAgICAgaXNJbmRldGVybWluYXRlOiBmYWxzZSwKICAgICAgY2hlY2tBbGw6IGZhbHNlLAogICAgICB0aW1lb3V0OiBudWxsCiAgICB9CiAgfSwKICB3YXRjaDogewogICAgZGF0YTogewogICAgICBoYW5kbGVyOiAnaGFuZGxlRGF0YScsCiAgICAgIGltbWVkaWF0ZTogdHJ1ZSwKICAgICAgZGVlcDogdHJ1ZQogICAgfSwKICAgIGxldmVsOiB7CiAgICAgIGhhbmRsZXI6ICdleHBhbmRUb0xldmVsJywKICAgICAgaW1tZWRpYXRlOiB0cnVlCiAgICB9LAogICAgZGVmYXVsdENoZWNrZWRLZXlzOiB7CiAgICAgIGhhbmRsZXI6ICdoYW5kbGVDaGVja0NoYW5nZScsCiAgICAgIGltbWVkaWF0ZTogdHJ1ZQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgLyoqCiAgICAgKiBAbWV0aG9kIOWxleW8gOiHs+aMh+WumuWxgue6pwogICAgICogQHBhcmFtIHtOdW1iZXJ9IGxldmVsIOimgeWxleW8gOiHs+WHoOe6p++8nzAsIDEsIDIsIDMuLi4KICAgICAqKi8KICAgIGFzeW5jIGV4cGFuZFRvTGV2ZWwobGV2ZWwpIHsKICAgICAgaWYgKHRoaXMuaXNGaXJzdCAmJiAodGhpcy5kZWZhdWx0RXhwYW5kQWxsIHx8IHRoaXMuZGVmYXVsdEV4cGFuZGVkS2V5cy5sZW5ndGgpKSB7CiAgICAgICAgdGhpcy5pc0ZpcnN0ID0gZmFsc2UKICAgICAgICByZXR1cm4KICAgICAgfQogICAgICB0aGlzLmlzRmlyc3QgPSBmYWxzZQogICAgICBpZiAoIXRoaXMubWF4TGV2ZWwpIHsKICAgICAgICBhd2FpdCB0aGlzLmhhbmRsZURhdGEoKQogICAgICB9CiAgICAgIGNvbnN0IGFsbE5vZGVzID0gdGhpcy5hbGxOb2Rlcy5zb3J0KChhLCBiKSA9PiBiLmxldmVsIC0gYS5sZXZlbCkKICAgICAgaWYgKGxldmVsID09PSAwKSB7CiAgICAgICAgLy8g5bGV5byA5YWo6YOoCiAgICAgICAgYWxsTm9kZXMuZm9yRWFjaChub2RlID0+IHsKICAgICAgICAgIG5vZGUuaXNMZWFmICYmIG5vZGUuZXhwYW5kKG51bGwsIHRydWUpCiAgICAgICAgfSkKICAgICAgfSBlbHNlIHsKICAgICAgICBhbGxOb2Rlcy5mb3JFYWNoKG5vZGUgPT4gewogICAgICAgICAgaWYgKG5vZGUubGV2ZWwgPj0gbGV2ZWwpIHsKICAgICAgICAgICAgbm9kZS5leHBhbmRlZCA9IGZhbHNlCiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBub2RlLmV4cGFuZGVkID0gdHJ1ZQogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIH0KICAgIH0sCiAgICBoYW5kbGVEYXRhKCkgewogICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7CiAgICAgICAgdGhpcy5hbGxOb2RlcyA9IHRoaXMuZ2V0QWxsTm9kZXModGhpcy4kcmVmc1t0aGlzLnJlZl0ucm9vdFtjaGlsZE5vZGVzXSkKICAgICAgICB0aGlzLmFsbE5vZGVzLmxlbmd0aCAmJgogICAgICAgICAgKHRoaXMubWF4TGV2ZWwgPSBNYXRoLm1heC5hcHBseSgKICAgICAgICAgICAgbnVsbCwKICAgICAgICAgICAgdGhpcy5hbGxOb2Rlcy5tYXAoKHsgbGV2ZWwgfSkgPT4gbGV2ZWwpCiAgICAgICAgICApKQogICAgICAgIHRoaXMuJGVtaXQoJ21heC1sZXZlbCcsIHRoaXMubWF4TGV2ZWwpCiAgICAgICAgdGhpcy5oYW5kbGVDaGVja0NoYW5nZSgpCiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpCiAgICAgIH0pCiAgICB9LAogICAgZ2V0QWxsTm9kZXMoKSB7CiAgICAgIGxldCBhbGxOb2RlcyA9IFtdCiAgICAgIGNvbnN0IHRyYXZlcnNlID0gZnVuY3Rpb24obm9kZSkgewogICAgICAgIGNvbnN0IGNoaWxkTm9kZXMgPSBub2RlLnJvb3QgPyBub2RlLnJvb3QuY2hpbGROb2RlcyA6IG5vZGUuY2hpbGROb2RlcwogICAgICAgIGNoaWxkTm9kZXMuZm9yRWFjaChjaGlsZCA9PiB7CiAgICAgICAgICBhbGxOb2Rlcy5wdXNoKGNoaWxkKQogICAgICAgICAgdHJhdmVyc2UoY2hpbGQpCiAgICAgICAgfSkKICAgICAgfQogICAgICB0cmF2ZXJzZSh0aGlzLiRyZWZzW3RoaXMucmVmXSkKICAgICAgcmV0dXJuIGFsbE5vZGVzCiAgICB9LAogICAgLy8g5aSE55CG5YWo6YCJCiAgICBoYW5kbGVDaGVja0FsbENoYW5nZSgpIHsKICAgICAgdGhpcy5pc0luZGV0ZXJtaW5hdGUgPSBmYWxzZQogICAgICBsZXQgY2hlY2tlZEtleXMgPSBbXQogICAgICBpZiAodGhpcy5jaGVja0FsbCkgewogICAgICAgIGNvbnN0IGNoZWNrZWROb2RlcyA9IHRoaXMuYWxsTm9kZXMuZmlsdGVyKCh7IHZpc2libGUgfSkgPT4gdmlzaWJsZSkKICAgICAgICBjaGVja2VkS2V5cyA9IGNoZWNrZWROb2Rlcy5tYXAoKHsga2V5IH0pID0+IGtleSkKICAgICAgICB0aGlzLiRlbWl0KAogICAgICAgICAgJ2NoZWNrJywKICAgICAgICAgIHsgW3RoaXMuJHJlZnNbdGhpcy5yZWZdLnByb3BzLmxhYmVsIHx8ICdsYWJlbCddOiAn5YWo6YCJJyB9LAogICAgICAgICAgewogICAgICAgICAgICBjaGVja2VkTm9kZXMsCiAgICAgICAgICAgIGNoZWNrZWRLZXlzLAogICAgICAgICAgICBoYWxmQ2hlY2tlZE5vZGVzOiBbXSwKICAgICAgICAgICAgaGFsZkNoZWNrZWRLZXlzOiBbXQogICAgICAgICAgfQogICAgICAgICkKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLiRlbWl0KAogICAgICAgICAgJ2NoZWNrJywKICAgICAgICAgIHsgW3RoaXMuJHJlZnNbdGhpcy5yZWZdLnByb3BzLmxhYmVsIHx8ICdsYWJlbCddOiAn5YWo6YCJJyB9LAogICAgICAgICAgewogICAgICAgICAgICBjaGVja2VkTm9kZXM6IFtdLAogICAgICAgICAgICBjaGVja2VkS2V5czogW10sCiAgICAgICAgICAgIGhhbGZDaGVja2VkTm9kZXM6IFtdLAogICAgICAgICAgICBoYWxmQ2hlY2tlZEtleXM6IFtdCiAgICAgICAgICB9CiAgICAgICAgKQogICAgICB9CiAgICAgIHRoaXMuJHJlZnNbdGhpcy5yZWZdLnNldENoZWNrZWRLZXlzKGNoZWNrZWRLZXlzKQogICAgfSwKICAgIGhhbmRsZUNoZWNrQ2hhbmdlKCkgewogICAgICBpZiAoIXRoaXMuc2hvd0NoZWNrQWxsIHx8ICF0aGlzLnNob3dDaGVja2JveCB8fCAhdGhpcy5kYXRhLmxlbmd0aCkgewogICAgICAgIHJldHVybgogICAgICB9CiAgICAgIC8vIOmYsuaKlgogICAgICB0aGlzLmRlYm91bmNlKHRoaXMuaGFuZGxlQ2hlY2tBbGxTdGF0dXMsIDEwMCkKICAgIH0sCiAgICAvLyDpmLLmipYKICAgIGRlYm91bmNlKGZ1bmMsIHdhaXQpIHsKICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCkKICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jLCB3YWl0KQogICAgfSwKICAgIGhhbmRsZUNoZWNrQWxsU3RhdHVzKCkgewogICAgICBjb25zdCBhbGxOb2RlcyA9IHRoaXMuYWxsTm9kZXMuZmlsdGVyKCh7IGxldmVsLCB2aXNpYmxlIH0pID0+IGxldmVsID09PSAxICYmIHZpc2libGUpCiAgICAgIC8vIOWFs+S6jiBmaWx0ZXIg55qE6K+05piOOgogICAgICAvLyDlhajpgInnmoTnirbmgIHlhbblrp7lj6rlkozmoLnoioLngrnnmoTnirbmgIHmnInlhbMsIOiAjOS4lOS5n+WkhOeQhuS6hiBzZXQg5pa55rOV5LitIGxlYWZPbmx5IOS4uiB0cnVlIOeahOaDheWGtQogICAgICAvLyB2aXNpYmxlIOe7k+WQiOi/h+a7pOS9v+eUqAogICAgICB0aGlzLmNoZWNrQWxsID0gYWxsTm9kZXMuZXZlcnkoKHsgY2hlY2tlZCB9KSA9PiBjaGVja2VkKQogICAgICB0aGlzLmlzSW5kZXRlcm1pbmF0ZSA9CiAgICAgICAgYWxsTm9kZXMuc29tZSgoeyBpbmRldGVybWluYXRlIH0pID0+IGluZGV0ZXJtaW5hdGUpIHx8CiAgICAgICAgKGFsbE5vZGVzLnNvbWUoKHsgY2hlY2tlZCB9KSA9PiBjaGVja2VkKSAmJiAhdGhpcy5jaGVja0FsbCkKICAgIH0KICB9LAogIG1vdW50ZWQoKSB7CiAgICAvLyDnu5HlrpogZWwtdHJlZSDmlrnms5UKICAgIGZvciAobGV0IGtleSBpbiB0aGlzLiRyZWZzW3RoaXMucmVmXSkgewogICAgICBpZiAoIShrZXkgaW4gdGhpcykgJiYgdHlwZW9mIHRoaXMuJHJlZnNbdGhpcy5yZWZdW2tleV0gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICB0aGlzW2tleV0gPSB0aGlzLiRyZWZzW3RoaXMucmVmXVtrZXldLmJpbmQodGhpcy4kcmVmc1t0aGlzLnJlZl0pCiAgICAgIH0KICAgIH0KICB9Cn0K"},{"version":3,"sources":["Tree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"Tree.vue","sourceRoot":"docs/.vuepress/components","sourcesContent":["<!--\n * @Author: HenryTSZ\n * @Date: 2020-01-31 11:15:30\n * @Description: https://vue-element-extend.now.sh/#/element-ui/TreeDemo\n * @LastEditors: HenryTSZ\n * @LastEditTime: 2020-06-14 15:19:36\n -->\n<template>\n  <div class=\"b-tree\">\n    <el-checkbox\n      v-if=\"showCheckAll && showCheckbox && data.length\"\n      class=\"b-tree-check-all\"\n      :indeterminate=\"isIndeterminate\"\n      v-model=\"checkAll\"\n      @change=\"handleCheckAllChange\"\n      >全选</el-checkbox\n    >\n    <el-tree\n      :ref=\"ref\"\n      :key=\"key\"\n      :data=\"data\"\n      v-bind=\"$attrs\"\n      :node-key=\"nodeKey\"\n      :default-expand-all=\"defaultExpandAll\"\n      :default-expanded-keys=\"defaultExpandedKeys\"\n      :show-checkbox=\"showCheckbox\"\n      v-on=\"$listeners\"\n      @check-change=\"handleCheckChange\"\n    >\n      <slot slot-scope=\"{ node, data }\" v-bind=\"{ node, data }\"> {{ node.label }} </slot>\n    </el-tree>\n  </div>\n</template>\n\n<script>\nconst childNodes = 'childNodes'\n\nexport default {\n  name: 'Tree',\n  props: {\n    data: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    nodeKey: {\n      type: String,\n      default: 'id'\n    },\n    defaultExpandAll: {\n      type: Boolean,\n      default: false\n    },\n    defaultExpandedKeys: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    showCheckAll: {\n      type: Boolean,\n      default: false\n    },\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    },\n    level: {\n      type: Number,\n      default: 1\n    }\n  },\n  data() {\n    return {\n      ref: 'elTree',\n      key: '',\n      allNodes: [],\n      maxLevel: 0,\n      isFirst: true,\n      isIndeterminate: false,\n      checkAll: false,\n      timeout: null\n    }\n  },\n  watch: {\n    data: {\n      handler: 'handleData',\n      immediate: true,\n      deep: true\n    },\n    level: {\n      handler: 'expandToLevel',\n      immediate: true\n    },\n    defaultCheckedKeys: {\n      handler: 'handleCheckChange',\n      immediate: true\n    }\n  },\n  methods: {\n    /**\n     * @method 展开至指定层级\n     * @param {Number} level 要展开至几级？0, 1, 2, 3...\n     **/\n    async expandToLevel(level) {\n      if (this.isFirst && (this.defaultExpandAll || this.defaultExpandedKeys.length)) {\n        this.isFirst = false\n        return\n      }\n      this.isFirst = false\n      if (!this.maxLevel) {\n        await this.handleData()\n      }\n      const allNodes = this.allNodes.sort((a, b) => b.level - a.level)\n      if (level === 0) {\n        // 展开全部\n        allNodes.forEach(node => {\n          node.isLeaf && node.expand(null, true)\n        })\n      } else {\n        allNodes.forEach(node => {\n          if (node.level >= level) {\n            node.expanded = false\n          } else {\n            node.expanded = true\n          }\n        })\n      }\n    },\n    handleData() {\n      this.$nextTick(() => {\n        this.allNodes = this.getAllNodes(this.$refs[this.ref].root[childNodes])\n        this.allNodes.length &&\n          (this.maxLevel = Math.max.apply(\n            null,\n            this.allNodes.map(({ level }) => level)\n          ))\n        this.$emit('max-level', this.maxLevel)\n        this.handleCheckChange()\n        return Promise.resolve()\n      })\n    },\n    getAllNodes() {\n      let allNodes = []\n      const traverse = function(node) {\n        const childNodes = node.root ? node.root.childNodes : node.childNodes\n        childNodes.forEach(child => {\n          allNodes.push(child)\n          traverse(child)\n        })\n      }\n      traverse(this.$refs[this.ref])\n      return allNodes\n    },\n    // 处理全选\n    handleCheckAllChange() {\n      this.isIndeterminate = false\n      let checkedKeys = []\n      if (this.checkAll) {\n        const checkedNodes = this.allNodes.filter(({ visible }) => visible)\n        checkedKeys = checkedNodes.map(({ key }) => key)\n        this.$emit(\n          'check',\n          { [this.$refs[this.ref].props.label || 'label']: '全选' },\n          {\n            checkedNodes,\n            checkedKeys,\n            halfCheckedNodes: [],\n            halfCheckedKeys: []\n          }\n        )\n      } else {\n        this.$emit(\n          'check',\n          { [this.$refs[this.ref].props.label || 'label']: '全选' },\n          {\n            checkedNodes: [],\n            checkedKeys: [],\n            halfCheckedNodes: [],\n            halfCheckedKeys: []\n          }\n        )\n      }\n      this.$refs[this.ref].setCheckedKeys(checkedKeys)\n    },\n    handleCheckChange() {\n      if (!this.showCheckAll || !this.showCheckbox || !this.data.length) {\n        return\n      }\n      // 防抖\n      this.debounce(this.handleCheckAllStatus, 100)\n    },\n    // 防抖\n    debounce(func, wait) {\n      clearTimeout(this.timeout)\n      this.timeout = setTimeout(func, wait)\n    },\n    handleCheckAllStatus() {\n      const allNodes = this.allNodes.filter(({ level, visible }) => level === 1 && visible)\n      // 关于 filter 的说明:\n      // 全选的状态其实只和根节点的状态有关, 而且也处理了 set 方法中 leafOnly 为 true 的情况\n      // visible 结合过滤使用\n      this.checkAll = allNodes.every(({ checked }) => checked)\n      this.isIndeterminate =\n        allNodes.some(({ indeterminate }) => indeterminate) ||\n        (allNodes.some(({ checked }) => checked) && !this.checkAll)\n    }\n  },\n  mounted() {\n    // 绑定 el-tree 方法\n    for (let key in this.$refs[this.ref]) {\n      if (!(key in this) && typeof this.$refs[this.ref][key] === 'function') {\n        this[key] = this.$refs[this.ref][key].bind(this.$refs[this.ref])\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"less\">\n.b-tree {\n  color: #606266;\n  .b-tree-check-all {\n    padding-left: 8px;\n    font-weight: normal;\n    .el-checkbox__label {\n      color: #606266;\n    }\n  }\n}\n</style>\n"]}]}