{"remainingRequest":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liheng/Documents/workspace/vuepress-element-extend/docs/.vuepress/components/Tree1.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/docs/.vuepress/components/Tree1.vue","mtime":1598337875184},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5iLXRyZWUgewogIGNvbG9yOiAjNjA2MjY2OwogIC5iLXRyZWUtY2hlY2stYWxsIHsKICAgIHBhZGRpbmctbGVmdDogOHB4OwogICAgZm9udC13ZWlnaHQ6IG5vcm1hbDsKICAgIC5lbC1jaGVja2JveF9fbGFiZWwgewogICAgICBjb2xvcjogIzYwNjI2NjsKICAgIH0KICB9Cn0K"},{"version":3,"sources":["Tree1.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Tree1.vue","sourceRoot":"docs/.vuepress/components","sourcesContent":["<template>\n  <div class=\"b-tree\">\n    <el-checkbox\n      v-if=\"showCheckAll && showCheckbox\"\n      class=\"b-tree-check-all\"\n      :indeterminate=\"isIndeterminate\"\n      v-model=\"checkAll\"\n      @change=\"handleCheckAllChange\"\n      >全选</el-checkbox\n    >\n    <el-tree\n      :ref=\"ref\"\n      v-bind=\"$attrs\"\n      :node-key=\"nodeKey\"\n      :show-checkbox=\"showCheckbox\"\n      v-on=\"$listeners\"\n      @check=\"handleCheck\"\n    >\n      <slot slot-scope=\"{ node, data }\" v-bind=\"{ node, data }\"> {{ node.label }} </slot>\n    </el-tree>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Tree1',\n  props: {\n    nodeKey: {\n      type: String,\n      default: 'id'\n    },\n    showCheckAll: {\n      type: Boolean,\n      default: false\n    },\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    },\n    level: {\n      type: Number,\n      default: 1\n    }\n  },\n  data() {\n    return {\n      ref: 'elTree',\n      isIndeterminate: false,\n      checkAll: false\n    }\n  },\n  watch: {\n    level: {\n      handler: 'expandToLevel',\n      immediate: true\n    }\n  },\n  methods: {\n    /**\n     * @method 展开至指定层级\n     * @param {Number} level 要展开至几级？0, 1, 2, 3...\n     **/\n    expandToLevel(level) {\n      this.$nextTick(() => {\n        const elTreeStore = this.$refs[this.ref].store\n        const allNodes = elTreeStore._getAllNodes().sort((a, b) => b.level - a.level)\n        if (level === 0) {\n          // 展开全部\n          allNodes.forEach(node => {\n            node.isLeaf && node.expand(null, true)\n          })\n        } else {\n          allNodes.forEach(node => {\n            if (node.level >= level) {\n              node.expanded = false\n            } else {\n              node.expanded = true\n            }\n          })\n        }\n      })\n    },\n    // 处理全选\n    handleCheckAllChange() {\n      this.isIndeterminate = false\n      let checkedKeys = []\n      if (this.checkAll) {\n        const elTreeStore = this.$refs[this.ref].store\n        const checkedNodes = elTreeStore._getAllNodes().filter(({ visible }) => visible)\n        checkedKeys = checkedNodes.map(({ key }) => key)\n        this.$emit(\n          'check',\n          { [this.$refs[this.ref].props.label || 'label']: '全选' },\n          {\n            checkedNodes,\n            checkedKeys,\n            halfCheckedNodes: [],\n            halfCheckedKeys: []\n          }\n        )\n      } else {\n        this.$emit(\n          'check',\n          { [this.$refs[this.ref].props.label || 'label']: '全选' },\n          {\n            checkedNodes: [],\n            checkedKeys: [],\n            halfCheckedNodes: [],\n            halfCheckedKeys: []\n          }\n        )\n      }\n      this.$refs[this.ref].setCheckedKeys(checkedKeys)\n    },\n    // el-tree 复选框被点击\n    handleCheck(data, checked) {\n      if (!this.showCheckAll || !this.showCheckbox) {\n        return\n      }\n      const { checkedKeys } = checked\n      const elTreeStore = this.$refs[this.ref].store\n      const allNodes = elTreeStore._getAllNodes().filter(({ visible }) => visible)\n      if (checkedKeys.length) {\n        if (checkedKeys.length === allNodes.length) {\n          this.checkAll = true\n          this.isIndeterminate = false\n        } else {\n          this.checkAll = false\n          this.isIndeterminate = true\n        }\n      } else {\n        this.isIndeterminate = false\n        this.checkAll = false\n      }\n    }\n  },\n  mounted() {\n    // 绑定 el-tree 方法\n    for (let key in this.$refs[this.ref]) {\n      if (!(key in this) && typeof this.$refs[this.ref][key] === 'function') {\n        this[key] = this.$refs[this.ref][key].bind(this.$refs[this.ref])\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"less\">\n.b-tree {\n  color: #606266;\n  .b-tree-check-all {\n    padding-left: 8px;\n    font-weight: normal;\n    .el-checkbox__label {\n      color: #606266;\n    }\n  }\n}\n</style>\n"]}]}