{"remainingRequest":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liheng/Documents/workspace/vuepress-element-extend/docs/.vuepress/components/SelectTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/docs/.vuepress/components/SelectTree.vue","mtime":1598335799757},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liheng/Documents/workspace/vuepress-element-extend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnU2VsZWN0VHJlZScsCiAgcHJvcHM6IHsKICAgIHZhbHVlOiB7CiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlciwgQXJyYXldLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIG11bHRpcGxlOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgc2VsZWN0UHJvcHM6IHsKICAgICAgdHlwZTogT2JqZWN0LAogICAgICBkZWZhdWx0KCkgewogICAgICAgIHJldHVybiB7fQogICAgICB9CiAgICB9LAogICAgdHJlZVByb3BzOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4ge30KICAgICAgfSwKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0sCiAgICAvLyDljZXpgInml7bmmK/lkKblj6rog73pgInmi6nlj7blrZDoioLngrkKICAgIGN1cnJlbnRJc0xlYWY6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCiAgICAvKioKICAgICAqIEBkZXNjcmlwdGlvbjog6Ieq5a6a5LmJ5Y2V6YCJ5pe25Y+q6IO96YCJ5oup5a2Q6IqC54K55pa55rOVOyDkvJjlhYjnuqfpq5jkuo4gY3VycmVudElzTGVhZgogICAgICogQHBhcmFtIHtkYXRhOiBPYmplY3R9OiDlvZPliY3oioLngrnmlbDmja4KICAgICAqIEBwYXJhbSB7bm9kZTogT2JqZWN0fTog5b2T5YmN6IqC54K5IE5vZGUg5a+56LGhCiAgICAgKiBAcmV0dXJuOiBCb29sZWFuCiAgICAgKi8KICAgIGlzTGVhZkZ1bjogewogICAgICB0eXBlOiBGdW5jdGlvbgogICAgfQogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHRyZWVLZXk6IE1hdGgucmFuZG9tKCksCiAgICAgIHNlbGVjdERhdGE6ICcnLAogICAgICBzZWxlY3RPcHRpb25zOiBbXQogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHRyZWVCaW5kKCkgewogICAgICByZXR1cm4gewogICAgICAgIHNob3dDaGVja2JveDogdGhpcy5pc011bHRpcGxlLAogICAgICAgIGhpZ2hsaWdodEN1cnJlbnQ6ICF0aGlzLmlzTXVsdGlwbGUsCiAgICAgICAgZXhwYW5kT25DbGlja05vZGU6IHRoaXMuZXhwYW5kT25DbGlja05vZGUsCiAgICAgICAgbm9kZUtleTogJ2lkJywKICAgICAgICAuLi50aGlzLnRyZWVQcm9wcywKICAgICAgICBkZWZhdWx0Q2hlY2tlZEtleXM6IHRoaXMuaXNNdWx0aXBsZSA/IHRoaXMudmFsdWUgOiBbXSwKICAgICAgICBjdXJyZW50Tm9kZUtleTogdGhpcy5pc011bHRpcGxlID8gJycgOiB0aGlzLnZhbHVlCiAgICAgIH0KICAgIH0sCiAgICBpc011bHRpcGxlKCkgewogICAgICByZXR1cm4gdGhpcy5zZWxlY3RQcm9wcy5tdWx0aXBsZSB8fCB0aGlzLm11bHRpcGxlCiAgICB9LAogICAgZXhwYW5kT25DbGlja05vZGUoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzTXVsdGlwbGUgPyB0cnVlIDogdGhpcy5jdXJyZW50SXNMZWFmCiAgICB9CiAgfSwKICB3YXRjaDogewogICAgdmFsdWUoKSB7CiAgICAgIC8vIOS4uuS6huajgOa1iyB2LW1vZGVsIOeahOWPmOWMlgogICAgICBpZiAodGhpcy52YWx1ZSArICcnICE9PSB0aGlzLnNlbGVjdERhdGEgKyAnJykgewogICAgICAgIHRoaXMudHJlZUtleSA9IE1hdGgucmFuZG9tKCkKICAgICAgICB0aGlzLmluaXQoKQogICAgICB9CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBpbml0KCkgewogICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7CiAgICAgICAgaWYgKHRoaXMuaXNNdWx0aXBsZSkgewogICAgICAgICAgdGhpcy5oYW5kbGVDaGVja0NoYW5nZSgpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuaGFuZGxlQ3VycmVudENoYW5nZSgpCiAgICAgICAgfQogICAgICB9KQogICAgfSwKICAgIC8vIHNlbGVjdCDkuIvmi4nmoYblh7rnjrAv6ZqQ6JePCiAgICBoYW5kbGVWaXNpYmxlQ2hhbmdlKHZhbCkgewogICAgICAvLyDkuIvmi4nmoYbpmpDol4/lubbkuJTlgLzmlLnlj5jlkI4KICAgICAgaWYgKCF2YWwgJiYgdGhpcy52YWx1ZSArICcnICE9PSB0aGlzLnNlbGVjdERhdGEgKyAnJykgewogICAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgdGhpcy5zZWxlY3REYXRhKQogICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHRoaXMuc2VsZWN0RGF0YSkKICAgICAgfQogICAgICB0aGlzLiRlbWl0KCd2aXNpYmxlLWNoYW5nZScsIHZhbCkKICAgIH0sCiAgICAvLyBzZWxlY3Qg5riF56m6CiAgICBoYW5kbGVDbGVhcigpIHsKICAgICAgaWYgKHRoaXMuJHJlZnMudHJlZS5zaG93Q2hlY2tib3gpIHsKICAgICAgICB0aGlzLnNlbGVjdERhdGEgPSBbXQogICAgICAgIHRoaXMuJHJlZnMudHJlZS5zZXRDaGVja2VkS2V5cyhbXSkKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnNlbGVjdERhdGEgPSAnJwogICAgICAgIHRoaXMuJHJlZnMudHJlZS5zZXRDdXJyZW50S2V5KG51bGwpCiAgICAgIH0KICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCB0aGlzLnNlbGVjdERhdGEpCiAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHRoaXMuc2VsZWN0RGF0YSkKICAgICAgdGhpcy4kZW1pdCgnY2xlYXInKQogICAgfSwKICAgIC8vIHNlbGVjdCDnp7vpmaQgdGFnCiAgICBoYW5kbGVSZW1vdmVUYWcodmFsKSB7CiAgICAgIHRoaXMuJHJlZnMudHJlZS5zZXRDaGVja2VkKHZhbCwgZmFsc2UpCiAgICAgIGxldCBub2RlID0gdGhpcy4kcmVmcy50cmVlLmdldE5vZGUodmFsKQogICAgICBpZiAoIXRoaXMuJHJlZnMudHJlZS5jaGVja1N0cmljdGx5ICYmIG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy50cmVlMkxpc3Qobm9kZSkubWFwKGl0ZW0gPT4gewogICAgICAgICAgaWYgKGl0ZW0uY2hpbGROb2Rlcy5sZW5ndGggPD0gMCkgewogICAgICAgICAgICB0aGlzLiRyZWZzLnRyZWUuc2V0Q2hlY2tlZChpdGVtLCBmYWxzZSkKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIHRoaXMuaGFuZGxlQ2hlY2tDaGFuZ2UoKQogICAgICB9CiAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgdGhpcy5zZWxlY3REYXRhKQogICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCB0aGlzLnNlbGVjdERhdGEpCiAgICAgIHRoaXMuJGVtaXQoJ3JlbW92ZS10YWcnLCB2YWwpCiAgICB9LAogICAgLy8g5Y2V6YCJLCDoioLngrnooqvngrnlh7vml7bnmoTlm57osIMsIOi/lOWbnuiiq+eCueWHu+eahOiKgueCueaVsOaNrgogICAgaGFuZGxlQ3VycmVudENoYW5nZSgpIHsKICAgICAgLy8g5aaC5p6c5aSa6YCJLCDkuI3lpITnkIYKICAgICAgaWYgKHRoaXMuaXNNdWx0aXBsZSkgcmV0dXJuCiAgICAgIC8vIOe7mSBzZWxlY3RPcHRpb25zIOS4gOS4qum7mOiupOWAvCwg6Ziy5q2i5Ye6546w5peg5pWw5o2uLCDku47ogIzml6Dms5XmmL7npLogdHJlZQogICAgICB0aGlzLnNlbGVjdE9wdGlvbnMgPSBbe31dCiAgICAgIGNvbnN0IGN1cnJlbnROb2RlID0gdGhpcy4kcmVmcy50cmVlLmdldEN1cnJlbnROb2RlKCkKICAgICAgLy8g5b2T5YmN5Lyg5YWl55qE5YC85ZyoIHRyZWUg5Lit5peg5rOV5om+5YiwLCDpnIDopoHmuIXnqbogc2VsZWN0IOWAvAogICAgICBpZiAoIWN1cnJlbnROb2RlKSB7CiAgICAgICAgdGhpcy5zZWxlY3REYXRhID0gJycKICAgICAgICByZXR1cm4KICAgICAgfQogICAgICBjb25zdCBub2RlID0gdGhpcy4kcmVmcy50cmVlLmdldE5vZGUoY3VycmVudE5vZGUpCiAgICAgIC8vIOWIpOaWreWPtuWtkOiKgueCuQogICAgICBpZiAodGhpcy5pc0xlYWZGdW4gPyB0aGlzLmlzTGVhZkZ1bihjdXJyZW50Tm9kZSwgbm9kZSkgOiAhbm9kZS5pc0xlYWYgJiYgdGhpcy5jdXJyZW50SXNMZWFmKSB7CiAgICAgICAgLy8g5aaC5p6c5LiN5piv5Y+25a2Q6IqC54K5LCDorr7nva7lvZPliY3pgInkuK3oioLngrnku43kuLrkuIrkuIDkuKrlj7blrZDoioLngrkKICAgICAgICB0aGlzLiRyZWZzLnRyZWUuc2V0Q3VycmVudEtleSh0aGlzLnNlbGVjdERhdGEgfHwgbnVsbCkKICAgICAgICByZXR1cm4KICAgICAgfQogICAgICB0aGlzLnNlbGVjdERhdGEgPSAnJwogICAgICBjb25zdCB2YWx1ZSA9IG5vZGUua2V5CiAgICAgIGNvbnN0IGxhYmVsID0gbm9kZS5sYWJlbAogICAgICB0aGlzLnNlbGVjdE9wdGlvbnMgPSBbCiAgICAgICAgewogICAgICAgICAgdmFsdWUsCiAgICAgICAgICBsYWJlbAogICAgICAgIH0KICAgICAgXQogICAgICB0aGlzLnNlbGVjdERhdGEgPSB2YWx1ZQogICAgICB0aGlzLiRyZWZzLnNlbGVjdC5ibHVyKCkKICAgIH0sCiAgICAvLyDlpJrpgIksIOiKgueCueWLvumAieeKtuaAgeWPkeeUn+WPmOWMluaXtueahOWbnuiwgwogICAgaGFuZGxlQ2hlY2tDaGFuZ2UoKSB7CiAgICAgIHRoaXMuc2VsZWN0T3B0aW9ucyA9IFt7fV0KICAgICAgdGhpcy5zZWxlY3REYXRhID0gW10KICAgICAgY29uc3QgY2hlY2tlZEtleXMgPSB0aGlzLiRyZWZzLnRyZWUuZ2V0Q2hlY2tlZEtleXMoCiAgICAgICAgdGhpcy50cmVlUHJvcHMubGVhZk9ubHksCiAgICAgICAgdGhpcy50cmVlUHJvcHMuaW5jbHVkZUhhbGZDaGVja2VkCiAgICAgICkKICAgICAgY2hlY2tlZEtleXMuZm9yRWFjaChrZXkgPT4gewogICAgICAgIGNvbnN0IGNoZWNrZWROb2RlID0gdGhpcy4kcmVmcy50cmVlLmdldE5vZGUoa2V5KQogICAgICAgIGNvbnN0IHZhbHVlID0gY2hlY2tlZE5vZGUua2V5CiAgICAgICAgdGhpcy5zZWxlY3RPcHRpb25zLnB1c2goewogICAgICAgICAgdmFsdWUsCiAgICAgICAgICBsYWJlbDogY2hlY2tlZE5vZGUubGFiZWwKICAgICAgICB9KQogICAgICAgIHRoaXMuc2VsZWN0RGF0YS5wdXNoKHZhbHVlKQogICAgICB9KQogICAgfSwKICAgIHRyZWUyTGlzdCh0cmVlKSB7CiAgICAgIGxldCBxdWVlbiA9IFtdCiAgICAgIGxldCBvdXQgPSBbXQogICAgICBxdWVlbiA9IHF1ZWVuLmNvbmNhdCh0cmVlKQogICAgICB3aGlsZSAocXVlZW4ubGVuZ3RoKSB7CiAgICAgICAgbGV0IGZpcnN0ID0gcXVlZW4uc2hpZnQoKQogICAgICAgIGlmIChmaXJzdC5jaGlsZE5vZGVzKSB7CiAgICAgICAgICBxdWVlbiA9IHF1ZWVuLmNvbmNhdChmaXJzdC5jaGlsZE5vZGVzKQogICAgICAgIH0KICAgICAgICBvdXQucHVzaChmaXJzdCkKICAgICAgfQogICAgICByZXR1cm4gb3V0CiAgICB9CiAgfSwKICBtb3VudGVkKCkgewogICAgdGhpcy5pbml0KCkKICB9Cn0K"},{"version":3,"sources":["SelectTree.vue"],"names":[],"mappingsfile":"SelectTree.vue","sourceRoot":"docs/.vuepress/components","sourcesContent":["<template>\n  <div class=\"select-tree\">\n    <el-select\n      ref=\"select\"\n      v-model=\"selectData\"\n      v-bind=\"{ ...$attrs, ...selectProps }\"\n      @visible-change=\"handleVisibleChange\"\n      @remove-tag=\"handleRemoveTag\"\n      @clear=\"handleClear\"\n    >\n      <el-option\n        v-for=\"item in selectOptions\"\n        :key=\"item.value\"\n        :value=\"item.value\"\n        :label=\"item.label\"\n      ></el-option>\n      <tree\n        :key=\"treeKey\"\n        ref=\"tree\"\n        v-bind=\"treeBind\"\n        @current-change=\"handleCurrentChange\"\n        @check-change=\"handleCheckChange\"\n      ></tree>\n    </el-select>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'SelectTree',\n  props: {\n    value: {\n      type: [String, Number, Array],\n      required: true\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    selectProps: {\n      type: Object,\n      default() {\n        return {}\n      }\n    },\n    treeProps: {\n      type: Object,\n      default() {\n        return {}\n      },\n      required: true\n    },\n    // 单选时是否只能选择叶子节点\n    currentIsLeaf: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @description: 自定义单选时只能选择子节点方法; 优先级高于 currentIsLeaf\n     * @param {data: Object}: 当前节点数据\n     * @param {node: Object}: 当前节点 Node 对象\n     * @return: Boolean\n     */\n    isLeafFun: {\n      type: Function\n    }\n  },\n  data() {\n    return {\n      treeKey: Math.random(),\n      selectData: '',\n      selectOptions: []\n    }\n  },\n  computed: {\n    treeBind() {\n      return {\n        showCheckbox: this.isMultiple,\n        highlightCurrent: !this.isMultiple,\n        expandOnClickNode: this.expandOnClickNode,\n        nodeKey: 'id',\n        ...this.treeProps,\n        defaultCheckedKeys: this.isMultiple ? this.value : [],\n        currentNodeKey: this.isMultiple ? '' : this.value\n      }\n    },\n    isMultiple() {\n      return this.selectProps.multiple || this.multiple\n    },\n    expandOnClickNode() {\n      return this.isMultiple ? true : this.currentIsLeaf\n    }\n  },\n  watch: {\n    value() {\n      // 为了检测 v-model 的变化\n      if (this.value + '' !== this.selectData + '') {\n        this.treeKey = Math.random()\n        this.init()\n      }\n    }\n  },\n  methods: {\n    init() {\n      this.$nextTick(() => {\n        if (this.isMultiple) {\n          this.handleCheckChange()\n        } else {\n          this.handleCurrentChange()\n        }\n      })\n    },\n    // select 下拉框出现/隐藏\n    handleVisibleChange(val) {\n      // 下拉框隐藏并且值改变后\n      if (!val && this.value + '' !== this.selectData + '') {\n        this.$emit('input', this.selectData)\n        this.$emit('change', this.selectData)\n      }\n      this.$emit('visible-change', val)\n    },\n    // select 清空\n    handleClear() {\n      if (this.$refs.tree.showCheckbox) {\n        this.selectData = []\n        this.$refs.tree.setCheckedKeys([])\n      } else {\n        this.selectData = ''\n        this.$refs.tree.setCurrentKey(null)\n      }\n      this.$emit('input', this.selectData)\n      this.$emit('change', this.selectData)\n      this.$emit('clear')\n    },\n    // select 移除 tag\n    handleRemoveTag(val) {\n      this.$refs.tree.setChecked(val, false)\n      let node = this.$refs.tree.getNode(val)\n      if (!this.$refs.tree.checkStrictly && node.childNodes.length > 0) {\n        this.tree2List(node).map(item => {\n          if (item.childNodes.length <= 0) {\n            this.$refs.tree.setChecked(item, false)\n          }\n        })\n        this.handleCheckChange()\n      }\n      this.$emit('input', this.selectData)\n      this.$emit('change', this.selectData)\n      this.$emit('remove-tag', val)\n    },\n    // 单选, 节点被点击时的回调, 返回被点击的节点数据\n    handleCurrentChange() {\n      // 如果多选, 不处理\n      if (this.isMultiple) return\n      // 给 selectOptions 一个默认值, 防止出现无数据, 从而无法显示 tree\n      this.selectOptions = [{}]\n      const currentNode = this.$refs.tree.getCurrentNode()\n      // 当前传入的值在 tree 中无法找到, 需要清空 select 值\n      if (!currentNode) {\n        this.selectData = ''\n        return\n      }\n      const node = this.$refs.tree.getNode(currentNode)\n      // 判断叶子节点\n      if (this.isLeafFun ? this.isLeafFun(currentNode, node) : !node.isLeaf && this.currentIsLeaf) {\n        // 如果不是叶子节点, 设置当前选中节点仍为上一个叶子节点\n        this.$refs.tree.setCurrentKey(this.selectData || null)\n        return\n      }\n      this.selectData = ''\n      const value = node.key\n      const label = node.label\n      this.selectOptions = [\n        {\n          value,\n          label\n        }\n      ]\n      this.selectData = value\n      this.$refs.select.blur()\n    },\n    // 多选, 节点勾选状态发生变化时的回调\n    handleCheckChange() {\n      this.selectOptions = [{}]\n      this.selectData = []\n      const checkedKeys = this.$refs.tree.getCheckedKeys(\n        this.treeProps.leafOnly,\n        this.treeProps.includeHalfChecked\n      )\n      checkedKeys.forEach(key => {\n        const checkedNode = this.$refs.tree.getNode(key)\n        const value = checkedNode.key\n        this.selectOptions.push({\n          value,\n          label: checkedNode.label\n        })\n        this.selectData.push(value)\n      })\n    },\n    tree2List(tree) {\n      let queen = []\n      let out = []\n      queen = queen.concat(tree)\n      while (queen.length) {\n        let first = queen.shift()\n        if (first.childNodes) {\n          queen = queen.concat(first.childNodes)\n        }\n        out.push(first)\n      }\n      return out\n    }\n  },\n  mounted() {\n    this.init()\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.select-tree {\n  display: inline-block;\n  .el-select {\n    width: 100%;\n  }\n}\n.el-select-dropdown__item {\n  display: none;\n}\n</style>\n"]}]}